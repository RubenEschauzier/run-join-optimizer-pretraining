{"version":3,"file":"CleanWatDivQueries.js","sourceRoot":"","sources":["CleanWatDivQueries.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAsD;AACtD,6DAA6D;AAC7D,4BAA4B;AAC5B,8CAA8C;AAC9C,uCAAyB;AACzB,2CAA6B;AAI7B,MAAM,kBAAkB;IAMpB;QACI,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC,WAAW,CAAC;QACtE,IAAI,CAAC,UAAU,GAAC,EAAE,CAAC;IACvB,CAAC;IAEM,YAAY;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IAEM,iBAAiB,CAAC,QAAgB;QACrC,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAE,QAAQ,CAAE,CAAC;QACzC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAC;YACrB,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAE,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,EAAE,OAAO,CAAE,CAAC;YACrE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;SAChC;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEM,aAAa;QAChB,IAAI,cAAc,GAAe,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnH,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;QACnE,cAAc,CAAC,OAAO,CAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAE,CAAE,CAAC;QACpD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC;IAChD,CAAC;IAEM,mBAAmB,CAAC,QAAgB;QACvC,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IACpE,CAAC;CACJ;AAED,SAAS,KAAK,CAAC,KAAe,EAAE,IAAY;IACxC,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAClD,CAAC;AACD,MAAM,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;AAC7C,wGAAwG;AACxG,mDAAmD;AACnD,WAAW,CAAC,iBAAiB,CAAC,2DAA2D,CAAC,CAAC;AAC3F,WAAW,CAAC,aAAa,EAAE,CAAC;AAC5B,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,wBAAwB,EAAE,oBAAoB,CAAC,CAAC,CAAA","sourcesContent":["// import {LoggerTimer} from \"@comunica/logger-timer\";\n// import {QueryEngineFactory} from \"@comunica/query-sparql\";\n// const v8 = require('v8');\n// v8.setFlagsFromString('--stack-size=4096');\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { arrayBuffer } from 'stream/consumers';\n\n  \nclass CleanWatDivQueries{\n    public engine: any;\n    public queryEngine: any;\n    public rawQueries: string[];\n    public cleanedQueries: string[];\n\n    public constructor(){\n        this.queryEngine = require(\"@comunica/query-sparql-file\").QueryEngine;\n        this.rawQueries=[];\n    }\n  \n    public createEngine(){\n        this.engine = new this.queryEngine();\n    }\n  \n    public loadWatDivQueries(queryDir: string){\n        const files = fs.readdirSync( queryDir );\n        for (const file of files){\n            const data = fs.readFileSync( path.join( queryDir, file ), 'utf-8' );\n            this.rawQueries.push( data );\n        }\n        return true\n    }\n\n    public formatQueries(){\n        let cleanedQueries: string[][] = this.rawQueries.map(x => x.replace(/\\n/g, '').replace(/\\t/g, '').split('SELECT'));\n        cleanedQueries = cleanedQueries.map(x => x.map(y => 'SELECT' + y));\n        cleanedQueries.forEach( arr => arr.splice( 0, 1 ) );\n        this.cleanedQueries = cleanedQueries.flat();\n    }\n\n    public writeCleanedQueries(location: string){\n        fs.writeFileSync(location, JSON.stringify(this.cleanedQueries));\n    }\n}\n\nfunction write(array: number[], path: string) {\n    fs.writeFileSync(path, JSON.stringify(array));\n}\nconst queryEngine = new CleanWatDivQueries();\n// Hardcoded to use my personal system wide dataset to prevent mixing matching of dataset instantiations\n// If other people want to use this change the path\nqueryEngine.loadWatDivQueries('/home/reschauz/projects/benchmarks/watdiv-dataset/queries');\nqueryEngine.formatQueries();\nqueryEngine.writeCleanedQueries(path.join(__dirname, \"..\", \"..\", \"data\", \"cleaned-watdiv-queries\", \"cleanedQueries.txt\"))\n"]}