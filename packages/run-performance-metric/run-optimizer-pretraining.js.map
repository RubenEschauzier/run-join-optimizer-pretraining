{"version":3,"file":"run-optimizer-pretraining.js","sourceRoot":"","sources":["run-optimizer-pretraining.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\n\nclass ComunicaOptimizerPretraining{\n    public engine: any;\n    public queryEngine: any;\n    \n    public constructor(){\n      this.queryEngine = require(\"@comunica/query-sparql-file\").QueryEngine;\n    }\n\n    public main(){\n\n    }\n\n    public async createEngine(){\n      this.engine = new this.queryEngine();\n    }\n\n    public readQueries(queryFileLocation: string){\n      const queries = JSON.parse(fs.readFileSync(queryFileLocation, 'utf8'));\n      return queries;\n    }\n\n    public readCardinalities(cardinalityFileLocation: string){\n      const cardinalities = JSON.parse(fs.readFileSync(cardinalityFileLocation, 'utf8'));\n      return cardinalities;\n    }\n\n    public createTrainValSplit(queries: string[], cardinalities: number[], trainSize: number){\n      if (trainSize > 1 || trainSize < 0){\n        throw new Error(`Invalid trainSize, got: ${trainSize}, should be between 0 and 1`);\n      }\n\n      this.shuffle(queries, cardinalities);\n      const spliceIndex = Math.floor(queries.length * trainSize);\n      const dataset: IDataSet = {\n        valQueries: queries.splice(spliceIndex),\n        valCardinalities: cardinalities.splice(spliceIndex),\n        trainQueries: queries,\n        trainCardinalities: cardinalities\n      };\n      return dataset;\n    }\n\n    /**\n     * Shuffles all input arrays the same way in place\n     * @param toShuffle array of elements that need to be shuffled, each element MUST have equal length\n     * @returns \n     */\n    public shuffle(...toShuffle: any[][]) {\n      // Checks if all input lengths are equal\n      if (!toShuffle.every((x) => x.length == toShuffle[0].length)){\n        console.error(\"Tried shuffling arrays with unequal length.\");\n      }\n\n      // Create array with undefined that tracks temporary values for shuffle\n      const tempValuesArray: any[] = [];\n      for (let k = 0; k< toShuffle.length; k++){\n        let x;\n        tempValuesArray.push(x);\n      }\n      // Shuffle the array\n      for (let i = toShuffle[0].length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        for (let z = 0; z < tempValuesArray.length; z++){\n          tempValuesArray[z] = toShuffle[z][i];\n          toShuffle[z][i] = toShuffle[z][j];\n          toShuffle[z][j] = tempValuesArray[z];\n        }\n      }\n      return toShuffle;\n    }\n  \n\n    public async runPretraining(\n      trainQueries: string[], \n      trainCardinalities: number[], \n      valQueries: string[],\n      valCardinalities: number[],\n      batchSize: number, \n      numEpochs: number, \n      optimizer: optimizerOptions,\n      lr: number,\n      modelDirectory: string\n    ){\n      await this.engine.pretrainOptimizer(\n        trainQueries, \n        trainCardinalities, \n        valQueries,\n        valCardinalities,\n        {sources: [path.join(__dirname, \"..\", \"..\", \"output\", \"dataset.nt\")]},\n        batchSize, \n        numEpochs,\n        optimizer,\n        lr,\n        modelDirectory    \n      );\n    }\n}\n\nconst queryVal = `SELECT ?v0 ?v2 ?v3 WHERE {\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/subscribes> <http://db.uwaterloo.ca/~galuc/wsdbm/Website10> .\n\t?v2 <http://schema.org/caption> ?v3 .\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/likes> ?v2 .\n} `;\n\nconst queryWatDiv = `\nSELECT ?v0 ?v2 ?v3 WHERE {\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/subscribes> <http://db.uwaterloo.ca/~galuc/wsdbm/Website24> .\n\t?v2 <http://schema.org/caption> ?v3 .\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/likes> ?v2 .\n}\n`\n\nconst testModelDirectory = path.join(__dirname, \"..\", \"..\", \"model-configs\", \"test-model-config\");\n\n`/home/reschauz/projects/comunica-join-optimizer-pretraining/packages/\nactor-rdf-join-inner-multi-reinforcement-learning-tree/models/gcn-models`;\n\nconst runner = new ComunicaOptimizerPretraining();\nconst queries = runner.readQueries(path.join(__dirname, \"..\", \"..\", \"data\", \"query_strings.json\"));\nconst cardinalities = runner.readCardinalities(path.join(__dirname, \"..\", \"..\", \"data\", \"query_cardinalities.json\"));\nconst dataset = runner.createTrainValSplit(queries, cardinalities, .8);\nrunner.createEngine().then(async () => { \n  runner.runPretraining(\n    dataset.trainQueries,\n    dataset.trainCardinalities, \n    dataset.valQueries,\n    dataset.valCardinalities,\n    32,\n    100,\n    'adam',\n    0.0001,\n    testModelDirectory);\n});\n\nexport type optimizerOptions = \"adam\" | \"sgd\";\n\nexport interface IDataSet {\n  trainQueries: string[];\n  trainCardinalities: number[];\n  valQueries: string[];\n  valCardinalities: number[];\n}"]}