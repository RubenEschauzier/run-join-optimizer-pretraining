{"version":3,"file":"ComunicaOptimizerPretraining.js","sourceRoot":"","sources":["ComunicaOptimizerPretraining.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\n\nclass ComunicaOptimizerPretraining{\n    public engine: any;\n    public queryEngine: any;\n    \n    public constructor(){\n      this.queryEngine = require(\"@comunica/query-sparql-file\").QueryEngine;\n    }\n\n    public main(){\n\n    }\n\n    public saveTrainLogToFile(location: string, data: ISearchTrainLog[]){\n      fs.writeFileSync(location, JSON.stringify(data));\n    }\n\n    public async createEngine(){\n      this.engine = new this.queryEngine();\n    }\n\n    public readQueries(queryFileLocation: string){\n      const queries = JSON.parse(fs.readFileSync(queryFileLocation, 'utf8'));\n      return queries;\n    }\n\n    public readCardinalities(cardinalityFileLocation: string){\n      const cardinalities = JSON.parse(fs.readFileSync(cardinalityFileLocation, 'utf8'));\n      return cardinalities;\n    }\n    \n    public mean(data: number[]){\n      return (data.reduce((a, b) => a + b, 0) / data.length) || 0;\n    }\n    \n    public std(data: number[]) {\n      const n = data.length\n      const mean = data.reduce((a, b) => a + b) / n\n      return Math.sqrt(data.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)\n    } \n\n    public scale(data: number[]){\n      const min = Math.min(...data);\n      const max = Math.max(...data);\n      return data.map(x => (x-min)/(max-min));\n    }\n\n    public createTrainValSplit(queries: string[], cardinalities: number[], trainSize: number){\n      if (trainSize > 1 || trainSize < 0){\n        throw new Error(`Invalid trainSize, got: ${trainSize}, should be between 0 and 1`);\n      }\n\n      this.shuffle(queries, cardinalities);\n      const spliceIndex = Math.floor(queries.length * trainSize);\n      const dataset: IDataSet = {\n        valQueries: queries.splice(spliceIndex),\n        valCardinalities: cardinalities.splice(spliceIndex),\n        trainQueries: queries,\n        trainCardinalities: cardinalities\n      };\n      return dataset;\n    }\n\n    /**\n     * Shuffles all input arrays the same way in place\n     * @param toShuffle array of elements that need to be shuffled, each element MUST have equal length\n     * @returns \n     */\n    public shuffle(...toShuffle: any[][]) {\n      // Checks if all input lengths are equal\n      if (!toShuffle.every((x) => x.length == toShuffle[0].length)){\n        console.error(\"Tried shuffling arrays with unequal length.\");\n      }\n\n      // Create array with undefined that tracks temporary values for shuffle\n      const tempValuesArray: any[] = [];\n      for (let k = 0; k< toShuffle.length; k++){\n        let x;\n        tempValuesArray.push(x);\n      }\n      // Shuffle the array\n      for (let i = toShuffle[0].length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        for (let z = 0; z < tempValuesArray.length; z++){\n          tempValuesArray[z] = toShuffle[z][i];\n          toShuffle[z][i] = toShuffle[z][j];\n          toShuffle[z][j] = tempValuesArray[z];\n        }\n      }\n      return toShuffle;\n    }\n  \n\n    public async runPretraining(\n      trainQueries: string[], \n      trainCardinalities: number[], \n      valQueries: string[],\n      valCardinalities: number[],\n      source: string,\n      batchSize: number, \n      numEpochs: number, \n      optimizer: optimizerOptions,\n      lr: number,\n      modelDirectory: string,\n      modelWeightsLocation: string,\n      logValidation: boolean,\n      logValidationLocation: string,\n    ): Promise<ISearchTrainLog> {\n      return await this.engine.pretrainOptimizer(\n        trainQueries, \n        trainCardinalities, \n        valQueries,\n        valCardinalities,\n        {sources: [source]},\n        batchSize, \n        numEpochs,\n        optimizer,\n        lr,\n        modelDirectory,\n        modelWeightsLocation,\n        logValidationLocation,\n        logValidation    \n      );\n    }\n\n    public async runValidation(\n      trainQueries: string[],\n      trainCardinalities: number[],\n      valQueries: string[],\n      valCardinalities: number[],\n      source: string,\n      modelWeightsLocation: string,\n      logValidationLocation: string,\n    ){\n      this.engine.validateTrainedModel(\n        trainQueries,\n        trainCardinalities,\n        valQueries,\n        valCardinalities,\n        {sources: [source]},\n        modelWeightsLocation,\n        logValidationLocation\n      )\n    }\n  \n    public async random_search_hyperparameters(\n      n: number,\n      epochs: number, \n      lrRange: number[], \n      batchSizeOptions: number[], \n      trainQueries: string[], \n      trainCardinalities: number[], \n      valQueries: string[],\n      valCardinalities: number[],\n      source: string,\n      modelDirectory: string,\n      modelWeightsLocation: string,\n      logValidation: boolean,\n      logValidationLocation: string,\n    ){\n      const searchTrainLogs: ISearchTrainLog[] = [];\n      for (let i = 0; i<n; i++){\n        const lr = this.randomUniformFromRange(lrRange[0], lrRange[1]);\n        const batchSize = batchSizeOptions[this.randomIntFromRange(0, batchSizeOptions.length)];\n        const rc: number = Math.random();\n        let optimizer: optimizerOptions = 'adam';\n        if (rc > .5){\n          optimizer = 'sgd';\n        }\n        console.log(`Train run ${i+1}/${n}`);\n        console.log(`Parameters: lr: ${lr}, bs: ${batchSize}, opt: ${optimizer}`);\n        const trainOutput = await this.runPretraining(\n          trainQueries, trainCardinalities, \n          valQueries, valCardinalities,\n          source,\n          batchSize, epochs, optimizer, lr, \n          modelDirectory, modelWeightsLocation,\n          logValidation, logValidationLocation\n        );\n        trainOutput.lr = lr; trainOutput.bSize = batchSize; trainOutput.opt = optimizer;\n        searchTrainLogs.push(trainOutput);\n      }\n      return searchTrainLogs;\n    }\n\n    public saveModel(location: string){\n      this.engine.saveModel(location);\n    }\n\n    public randomUniformFromRange(min: number, max: number){\n      return Math.random() * (max - min) + min;\n    }\n\n    public randomIntFromRange(min: number, max: number){\n      return Math.floor(this.randomUniformFromRange(min, max));\n    }\n    \n}\n\nconst queryVal = `SELECT ?v0 ?v2 ?v3 WHERE {\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/subscribes> <http://db.uwaterloo.ca/~galuc/wsdbm/Website10> .\n\t?v2 <http://schema.org/caption> ?v3 .\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/likes> ?v2 .\n} `;\n\nconst queryWatDiv = `\nSELECT ?v0 ?v2 ?v3 WHERE {\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/subscribes> <http://db.uwaterloo.ca/~galuc/wsdbm/Website24> .\n\t?v2 <http://schema.org/caption> ?v3 .\n\t?v0 <http://db.uwaterloo.ca/~galuc/wsdbm/likes> ?v2 .\n}\n`\n\nconst testModelDirectory = path.join(__dirname, \"..\", \"..\", \"model-configs\", \"full-tp-encoding-model-config\");\nconst modelWeightLocation = path.join(__dirname, \"..\", \"..\", \"trained-models\");\nconst logValidationLocation = path.join(__dirname, \"..\", \"..\", \"train-logs\", \"validation-log\");\nconst sourceLocation = \"/home/reschauz/projects/benchmarks/watdiv-dataset/dataset.nt\";\nconsole.log(`Model directory: ${testModelDirectory}`);\n\nconst runner = new ComunicaOptimizerPretraining();\nconst queries = runner.readQueries(path.join(__dirname, \"..\", \"..\", \"data\", \"randomly-generated-dataset\", \"query_strings.json\"));\nconst cardinalities: number[] = runner.readCardinalities(path.join(__dirname, \"..\", \"..\", \"data\", \"randomly-generated-dataset\", \"query_cardinalities.json\"));\n\nconst queriesWatDiv = runner.readQueries(\n  path.join(__dirname, \"..\", \"..\", \"data\", \"validation-data-watdiv\", \"query_strings.json\")\n);\nconst cardinalitiesWatDiv: number[] = runner.readCardinalities(\n  path.join(__dirname, \"..\", \"..\", \"data\", \"validation-data-watdiv\", \"query_cardinalities.json\")\n);\n\nconst dataset = runner.createTrainValSplit(queries, cardinalities, .9);\nrunner.createEngine().then(async () => { \n  console.log(`Number of queries: ${cardinalities.length}, cardinality average: ${runner.mean(cardinalities.map(x => Math.log(x+1)))} (${runner.std(cardinalities.map(x => Math.log(x+1)))})`);\n  await runner.runPretraining(\n    dataset.trainQueries.slice(0,10),\n    dataset.trainCardinalities.slice(0,10), \n    dataset.valQueries.slice(0,10),\n    dataset.valCardinalities.slice(0,10),\n    sourceLocation,\n    4,\n    20,\n    'adam',\n    0.00033074390352353083,\n    testModelDirectory,\n    modelWeightLocation,\n    true,\n    logValidationLocation,\n  );\n  console.log(cardinalitiesWatDiv);\n  await runner.runValidation(\n    dataset.trainQueries,\n    dataset.trainCardinalities, \n    queriesWatDiv,\n    cardinalitiesWatDiv,\n    sourceLocation,\n    path.join(modelWeightLocation, \"ckp5\", \"gcn-models\"),\n    logValidationLocation\n  );\n\n  // runner.saveModel('trained-models/model-best/');\n  // const trainOutput: ISearchTrainLog[] = await runner.random_search_hyperparameters(\n  //   20,\n  //   5,\n  //   [0.00001, 0.001],\n  //   [2, 4, 8, 16, 32, 64, 128, 256],\n  //   dataset.trainQueries,\n  //   dataset.trainCardinalities, \n  //   dataset.valQueries,\n  //   dataset.valCardinalities,\n  //   testModelDirectory\n  // )\n  // runner.saveTrainLogToFile(path.join(__dirname, \"..\", \"..\", \"train-logs/search-logs.txt\"), trainOutput)\n});\n\nexport type optimizerOptions = \"adam\" | \"sgd\";\n\nexport interface IDataSet {\n  trainQueries: string[];\n  trainCardinalities: number[];\n  valQueries: string[];\n  valCardinalities: number[];\n}\n\nexport interface ISearchTrainLog {\n  lr: number\n  bSize: number\n  opt: optimizerOptions\n  trainLoss: number[]\n  validationError: number[]\n}"]}